项目结构总结


主窗口 (mainwindow.py): 使用PyQt5和qfluentwidgets库创建主窗口，用于显示游戏界面和控制组件.   
游戏界面 (snake_card.py): 包含游戏画面预览、控制按钮（开始、停止）、分析结果显示开关、状态显示和日志输出等.   
蛇的AI决策 (minmax_snake_ai.py, advanced_snake_ai.py): 实现了蛇的AI逻辑，包括A*寻路、Voronoi区域控制、敌方路径预测等. 其中，minmax_snake_ai.py 使用MinMax算法和蒙特卡洛树搜索，而 advanced_snake_ai.py 实现了更高级的AI决策算法.   
游戏状态分析 (snake_analyzer.py): 分析游戏画面，检测游戏状态（开始、运行中、结束），识别蛇、食物、障碍物等游戏元素，并计算蛇的下一步移动方向.   
日志记录 (log.py): 用于记录程序运行过程中的日志信息，方便调试和问题追踪.   
类和方法总结

下面是对每个文件的主要类和方法的总结：

1.  mainwindow.py

MainWindow(FluentWindow):
__init__(self): 初始化主窗口，创建游戏界面部件 (SnakeGameCard)，并添加到导航栏.   
is_admin(): 检查程序是否以管理员权限运行.   
2.  minmax_snake_ai.py

MinMaxSnakeAI:
__init__(self, logger=None): 初始化MinMaxSnakeAI类，设置方向、权重、搜索深度等.   
log(self, message): 记录日志信息.   
a_star_search(self, board_state, start, end): 使用A*算法寻找从起点到终点的最佳路径.   
calculate_voronoi(self, board_state, own_head, enemy_heads): 计算Voronoi图，评估每个格子的控制权.   
predict_enemy_moves(self, board_state, enemy_heads): 预测敌方蛇的可能移动方向.   
evaluate_move_safety(self, board_state, head_pos, direction): 评估移动的安全性，考虑死路和被围困的风险.   
determine_next_move(self, board_state, own_head, enemy_heads, food_positions): 综合评估所有移动，决定下一步的最佳移动方向.   
3.  snake_analyzer.py

SnakeAnalyzer:
__init__(self, logger): 初始化SnakeAnalyzer类，设置游戏状态、颜色字典、控制器等.   
hex_to_rgb(hex_color): 将十六进制颜色代码转换为RGB元组.   
rgb_to_hsv(rgb_color): 将RGB颜色转换为HSV颜色.   
analyze_frame(self, frame): 分析游戏帧，更新游戏状态，计算蛇的下一步移动路径.   
calculate_path(self, board_state, start_pos, direction): 根据当前方向和游戏状态计算实际路径.   
click_window_center(self): 点击游戏窗口中心区域.   
is_game_over(self, frame): 检测当前帧是否是游戏失败界面.   
is_game_running(self, frame): 检测当前帧是否是游戏运行界面.   
analyze_board(self, frame): 分析游戏画面，提取游戏棋盘的状态信息.   
control_snake(self, direction): 控制蛇的移动.   
bfs(self, board_state, start, end): 使用BFS算法寻找从起点到终点的最短路径.   
determine_next_move(self, board_state): 确定蛇的下一步移动方向.   
4.  snake_card.py

SnakeGameCard(QFrame):
__init__(self, parent=None): 初始化游戏界面，设置布局、添加控件（游戏画面预览、按钮、标签、文本框等）.   
update_screen(self): 更新游戏画面预览，并使用OpenCV进行处理.   
start_running(self): 开始运行游戏，启动定时器.   
stop_running(self): 停止运行游戏，停止定时器.   
onAnalysisToggled(self, isChecked: bool): 处理分析结果显示开关的状态变化.   
5.  advanced_snake_ai.py

AdvancedSnakeAI:
__init__(self, logger=None): 初始化AdvancedSnakeAI类，设置方向、权重等.   
log(self, message): 记录日志信息.   
a_star_search(self, board_state, start, end): 使用A*算法寻找从起点到终点的最佳路径.   
calculate_voronoi(self, board_state, own_head, enemy_heads): 计算Voronoi图，评估每个格子的控制权.   
predict_enemy_moves(self, board_state, enemy_heads): 预测敌方蛇的可能移动方向.   
determine_next_move(self, board_state, own_head, enemy_heads, food_positions): 综合评估所有移动，决定下一步的最佳移动方向.   
6.  log.py

LogSignals(QObject):
log_signal: 用于在线程间传递日志信息的信号.   
SnakeLogger(QObject):
__init__(self, text_widget=None): 初始化日志记录器，设置日志级别、处理器和格式化器.   
log(self, message, level=logging.INFO): 记录日志.   
_update_text_widget(self, message): 在主线程中更新文本框内容.   
set_text_widget(self, text_widget): 设置用于显示日志的文本框部件.   
